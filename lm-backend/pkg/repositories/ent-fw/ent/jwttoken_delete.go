// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"license-manager/pkg/repositories/ent-fw/ent/jwttoken"
	"license-manager/pkg/repositories/ent-fw/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JwtTokenDelete is the builder for deleting a JwtToken entity.
type JwtTokenDelete struct {
	config
	hooks    []Hook
	mutation *JwtTokenMutation
}

// Where appends a list predicates to the JwtTokenDelete builder.
func (jtd *JwtTokenDelete) Where(ps ...predicate.JwtToken) *JwtTokenDelete {
	jtd.mutation.Where(ps...)
	return jtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jtd *JwtTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, JwtTokenMutation](ctx, jtd.sqlExec, jtd.mutation, jtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jtd *JwtTokenDelete) ExecX(ctx context.Context) int {
	n, err := jtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jtd *JwtTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: jwttoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jwttoken.FieldID,
			},
		},
	}
	if ps := jtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jtd.mutation.done = true
	return affected, err
}

// JwtTokenDeleteOne is the builder for deleting a single JwtToken entity.
type JwtTokenDeleteOne struct {
	jtd *JwtTokenDelete
}

// Where appends a list predicates to the JwtTokenDelete builder.
func (jtdo *JwtTokenDeleteOne) Where(ps ...predicate.JwtToken) *JwtTokenDeleteOne {
	jtdo.jtd.mutation.Where(ps...)
	return jtdo
}

// Exec executes the deletion query.
func (jtdo *JwtTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := jtdo.jtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jwttoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jtdo *JwtTokenDeleteOne) ExecX(ctx context.Context) {
	if err := jtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
