// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/license"
	"license-manager/pkg/repositories/ent-fw/ent/predicate"
	"license-manager/pkg/repositories/ent-fw/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSku sets the "sku" field.
func (pu *ProductUpdate) SetSku(s string) *ProductUpdate {
	pu.mutation.SetSku(s)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetInstallInstr sets the "install_instr" field.
func (pu *ProductUpdate) SetInstallInstr(s string) *ProductUpdate {
	pu.mutation.SetInstallInstr(s)
	return pu
}

// SetNillableInstallInstr sets the "install_instr" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableInstallInstr(s *string) *ProductUpdate {
	if s != nil {
		pu.SetInstallInstr(*s)
	}
	return pu
}

// SetLicenseCount sets the "license_count" field.
func (pu *ProductUpdate) SetLicenseCount(i int) *ProductUpdate {
	pu.mutation.ResetLicenseCount()
	pu.mutation.SetLicenseCount(i)
	return pu
}

// SetNillableLicenseCount sets the "license_count" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLicenseCount(i *int) *ProductUpdate {
	if i != nil {
		pu.SetLicenseCount(*i)
	}
	return pu
}

// AddLicenseCount adds i to the "license_count" field.
func (pu *ProductUpdate) AddLicenseCount(i int) *ProductUpdate {
	pu.mutation.AddLicenseCount(i)
	return pu
}

// SetDateCreated sets the "date_created" field.
func (pu *ProductUpdate) SetDateCreated(t time.Time) *ProductUpdate {
	pu.mutation.SetDateCreated(t)
	return pu
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDateCreated(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetDateCreated(*t)
	}
	return pu
}

// SetLastUpdated sets the "last_updated" field.
func (pu *ProductUpdate) SetLastUpdated(t time.Time) *ProductUpdate {
	pu.mutation.SetLastUpdated(t)
	return pu
}

// AddLicenseIDs adds the "license" edge to the License entity by IDs.
func (pu *ProductUpdate) AddLicenseIDs(ids ...string) *ProductUpdate {
	pu.mutation.AddLicenseIDs(ids...)
	return pu
}

// AddLicense adds the "license" edges to the License entity.
func (pu *ProductUpdate) AddLicense(l ...*License) *ProductUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.AddLicenseIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearLicense clears all "license" edges to the License entity.
func (pu *ProductUpdate) ClearLicense() *ProductUpdate {
	pu.mutation.ClearLicense()
	return pu
}

// RemoveLicenseIDs removes the "license" edge to License entities by IDs.
func (pu *ProductUpdate) RemoveLicenseIDs(ids ...string) *ProductUpdate {
	pu.mutation.RemoveLicenseIDs(ids...)
	return pu
}

// RemoveLicense removes "license" edges to License entities.
func (pu *ProductUpdate) RemoveLicense(l ...*License) *ProductUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.RemoveLicenseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, ProductMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.LastUpdated(); !ok {
		v := product.UpdateDefaultLastUpdated()
		pu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.InstallInstr(); ok {
		_spec.SetField(product.FieldInstallInstr, field.TypeString, value)
	}
	if value, ok := pu.mutation.LicenseCount(); ok {
		_spec.SetField(product.FieldLicenseCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLicenseCount(); ok {
		_spec.AddField(product.FieldLicenseCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DateCreated(); ok {
		_spec.SetField(product.FieldDateCreated, field.TypeTime, value)
	}
	if value, ok := pu.mutation.LastUpdated(); ok {
		_spec.SetField(product.FieldLastUpdated, field.TypeTime, value)
	}
	if pu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.LicenseTable,
			Columns: product.LicensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLicenseIDs(); len(nodes) > 0 && !pu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.LicenseTable,
			Columns: product.LicensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.LicenseTable,
			Columns: product.LicensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetSku sets the "sku" field.
func (puo *ProductUpdateOne) SetSku(s string) *ProductUpdateOne {
	puo.mutation.SetSku(s)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetInstallInstr sets the "install_instr" field.
func (puo *ProductUpdateOne) SetInstallInstr(s string) *ProductUpdateOne {
	puo.mutation.SetInstallInstr(s)
	return puo
}

// SetNillableInstallInstr sets the "install_instr" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInstallInstr(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetInstallInstr(*s)
	}
	return puo
}

// SetLicenseCount sets the "license_count" field.
func (puo *ProductUpdateOne) SetLicenseCount(i int) *ProductUpdateOne {
	puo.mutation.ResetLicenseCount()
	puo.mutation.SetLicenseCount(i)
	return puo
}

// SetNillableLicenseCount sets the "license_count" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLicenseCount(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetLicenseCount(*i)
	}
	return puo
}

// AddLicenseCount adds i to the "license_count" field.
func (puo *ProductUpdateOne) AddLicenseCount(i int) *ProductUpdateOne {
	puo.mutation.AddLicenseCount(i)
	return puo
}

// SetDateCreated sets the "date_created" field.
func (puo *ProductUpdateOne) SetDateCreated(t time.Time) *ProductUpdateOne {
	puo.mutation.SetDateCreated(t)
	return puo
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDateCreated(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetDateCreated(*t)
	}
	return puo
}

// SetLastUpdated sets the "last_updated" field.
func (puo *ProductUpdateOne) SetLastUpdated(t time.Time) *ProductUpdateOne {
	puo.mutation.SetLastUpdated(t)
	return puo
}

// AddLicenseIDs adds the "license" edge to the License entity by IDs.
func (puo *ProductUpdateOne) AddLicenseIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.AddLicenseIDs(ids...)
	return puo
}

// AddLicense adds the "license" edges to the License entity.
func (puo *ProductUpdateOne) AddLicense(l ...*License) *ProductUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.AddLicenseIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearLicense clears all "license" edges to the License entity.
func (puo *ProductUpdateOne) ClearLicense() *ProductUpdateOne {
	puo.mutation.ClearLicense()
	return puo
}

// RemoveLicenseIDs removes the "license" edge to License entities by IDs.
func (puo *ProductUpdateOne) RemoveLicenseIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.RemoveLicenseIDs(ids...)
	return puo
}

// RemoveLicense removes "license" edges to License entities.
func (puo *ProductUpdateOne) RemoveLicense(l ...*License) *ProductUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.RemoveLicenseIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks[*Product, ProductMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.LastUpdated(); !ok {
		v := product.UpdateDefaultLastUpdated()
		puo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.InstallInstr(); ok {
		_spec.SetField(product.FieldInstallInstr, field.TypeString, value)
	}
	if value, ok := puo.mutation.LicenseCount(); ok {
		_spec.SetField(product.FieldLicenseCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLicenseCount(); ok {
		_spec.AddField(product.FieldLicenseCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DateCreated(); ok {
		_spec.SetField(product.FieldDateCreated, field.TypeTime, value)
	}
	if value, ok := puo.mutation.LastUpdated(); ok {
		_spec.SetField(product.FieldLastUpdated, field.TypeTime, value)
	}
	if puo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.LicenseTable,
			Columns: product.LicensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLicenseIDs(); len(nodes) > 0 && !puo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.LicenseTable,
			Columns: product.LicensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.LicenseTable,
			Columns: product.LicensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
