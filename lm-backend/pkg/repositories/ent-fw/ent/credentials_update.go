// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/claims"
	"license-manager/pkg/repositories/ent-fw/ent/credentials"
	"license-manager/pkg/repositories/ent-fw/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CredentialsUpdate is the builder for updating Credentials entities.
type CredentialsUpdate struct {
	config
	hooks    []Hook
	mutation *CredentialsMutation
}

// Where appends a list predicates to the CredentialsUpdate builder.
func (cu *CredentialsUpdate) Where(ps ...predicate.Credentials) *CredentialsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUsername sets the "username" field.
func (cu *CredentialsUpdate) SetUsername(s string) *CredentialsUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetPasswordHash sets the "password_hash" field.
func (cu *CredentialsUpdate) SetPasswordHash(s string) *CredentialsUpdate {
	cu.mutation.SetPasswordHash(s)
	return cu
}

// SetClaimsID sets the "claims" edge to the Claims entity by ID.
func (cu *CredentialsUpdate) SetClaimsID(id int) *CredentialsUpdate {
	cu.mutation.SetClaimsID(id)
	return cu
}

// SetNillableClaimsID sets the "claims" edge to the Claims entity by ID if the given value is not nil.
func (cu *CredentialsUpdate) SetNillableClaimsID(id *int) *CredentialsUpdate {
	if id != nil {
		cu = cu.SetClaimsID(*id)
	}
	return cu
}

// SetClaims sets the "claims" edge to the Claims entity.
func (cu *CredentialsUpdate) SetClaims(c *Claims) *CredentialsUpdate {
	return cu.SetClaimsID(c.ID)
}

// Mutation returns the CredentialsMutation object of the builder.
func (cu *CredentialsUpdate) Mutation() *CredentialsMutation {
	return cu.mutation
}

// ClearClaims clears the "claims" edge to the Claims entity.
func (cu *CredentialsUpdate) ClearClaims() *CredentialsUpdate {
	cu.mutation.ClearClaims()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CredentialsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CredentialsMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CredentialsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CredentialsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CredentialsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CredentialsUpdate) check() error {
	if v, ok := cu.mutation.Username(); ok {
		if err := credentials.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Credentials.username": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PasswordHash(); ok {
		if err := credentials.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Credentials.password_hash": %w`, err)}
		}
	}
	return nil
}

func (cu *CredentialsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   credentials.Table,
			Columns: credentials.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: credentials.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(credentials.FieldUsername, field.TypeString, value)
	}
	if value, ok := cu.mutation.PasswordHash(); ok {
		_spec.SetField(credentials.FieldPasswordHash, field.TypeString, value)
	}
	if cu.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   credentials.ClaimsTable,
			Columns: []string{credentials.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: claims.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   credentials.ClaimsTable,
			Columns: []string{credentials.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: claims.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credentials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CredentialsUpdateOne is the builder for updating a single Credentials entity.
type CredentialsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CredentialsMutation
}

// SetUsername sets the "username" field.
func (cuo *CredentialsUpdateOne) SetUsername(s string) *CredentialsUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetPasswordHash sets the "password_hash" field.
func (cuo *CredentialsUpdateOne) SetPasswordHash(s string) *CredentialsUpdateOne {
	cuo.mutation.SetPasswordHash(s)
	return cuo
}

// SetClaimsID sets the "claims" edge to the Claims entity by ID.
func (cuo *CredentialsUpdateOne) SetClaimsID(id int) *CredentialsUpdateOne {
	cuo.mutation.SetClaimsID(id)
	return cuo
}

// SetNillableClaimsID sets the "claims" edge to the Claims entity by ID if the given value is not nil.
func (cuo *CredentialsUpdateOne) SetNillableClaimsID(id *int) *CredentialsUpdateOne {
	if id != nil {
		cuo = cuo.SetClaimsID(*id)
	}
	return cuo
}

// SetClaims sets the "claims" edge to the Claims entity.
func (cuo *CredentialsUpdateOne) SetClaims(c *Claims) *CredentialsUpdateOne {
	return cuo.SetClaimsID(c.ID)
}

// Mutation returns the CredentialsMutation object of the builder.
func (cuo *CredentialsUpdateOne) Mutation() *CredentialsMutation {
	return cuo.mutation
}

// ClearClaims clears the "claims" edge to the Claims entity.
func (cuo *CredentialsUpdateOne) ClearClaims() *CredentialsUpdateOne {
	cuo.mutation.ClearClaims()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CredentialsUpdateOne) Select(field string, fields ...string) *CredentialsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Credentials entity.
func (cuo *CredentialsUpdateOne) Save(ctx context.Context) (*Credentials, error) {
	return withHooks[*Credentials, CredentialsMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CredentialsUpdateOne) SaveX(ctx context.Context) *Credentials {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CredentialsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CredentialsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CredentialsUpdateOne) check() error {
	if v, ok := cuo.mutation.Username(); ok {
		if err := credentials.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Credentials.username": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PasswordHash(); ok {
		if err := credentials.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Credentials.password_hash": %w`, err)}
		}
	}
	return nil
}

func (cuo *CredentialsUpdateOne) sqlSave(ctx context.Context) (_node *Credentials, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   credentials.Table,
			Columns: credentials.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: credentials.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Credentials.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, credentials.FieldID)
		for _, f := range fields {
			if !credentials.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != credentials.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(credentials.FieldUsername, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PasswordHash(); ok {
		_spec.SetField(credentials.FieldPasswordHash, field.TypeString, value)
	}
	if cuo.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   credentials.ClaimsTable,
			Columns: []string{credentials.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: claims.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   credentials.ClaimsTable,
			Columns: []string{credentials.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: claims.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Credentials{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credentials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
