// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/claims"
	"license-manager/pkg/repositories/ent-fw/ent/jwttoken"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JwtTokenCreate is the builder for creating a JwtToken entity.
type JwtTokenCreate struct {
	config
	mutation *JwtTokenMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (jtc *JwtTokenCreate) SetToken(s string) *JwtTokenCreate {
	jtc.mutation.SetToken(s)
	return jtc
}

// SetRevoked sets the "revoked" field.
func (jtc *JwtTokenCreate) SetRevoked(b bool) *JwtTokenCreate {
	jtc.mutation.SetRevoked(b)
	return jtc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (jtc *JwtTokenCreate) SetNillableRevoked(b *bool) *JwtTokenCreate {
	if b != nil {
		jtc.SetRevoked(*b)
	}
	return jtc
}

// AddClaimIDs adds the "claims" edge to the Claims entity by IDs.
func (jtc *JwtTokenCreate) AddClaimIDs(ids ...int) *JwtTokenCreate {
	jtc.mutation.AddClaimIDs(ids...)
	return jtc
}

// AddClaims adds the "claims" edges to the Claims entity.
func (jtc *JwtTokenCreate) AddClaims(c ...*Claims) *JwtTokenCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return jtc.AddClaimIDs(ids...)
}

// Mutation returns the JwtTokenMutation object of the builder.
func (jtc *JwtTokenCreate) Mutation() *JwtTokenMutation {
	return jtc.mutation
}

// Save creates the JwtToken in the database.
func (jtc *JwtTokenCreate) Save(ctx context.Context) (*JwtToken, error) {
	jtc.defaults()
	return withHooks[*JwtToken, JwtTokenMutation](ctx, jtc.sqlSave, jtc.mutation, jtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jtc *JwtTokenCreate) SaveX(ctx context.Context) *JwtToken {
	v, err := jtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jtc *JwtTokenCreate) Exec(ctx context.Context) error {
	_, err := jtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtc *JwtTokenCreate) ExecX(ctx context.Context) {
	if err := jtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtc *JwtTokenCreate) defaults() {
	if _, ok := jtc.mutation.Revoked(); !ok {
		v := jwttoken.DefaultRevoked
		jtc.mutation.SetRevoked(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jtc *JwtTokenCreate) check() error {
	if _, ok := jtc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "JwtToken.token"`)}
	}
	if v, ok := jtc.mutation.Token(); ok {
		if err := jwttoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "JwtToken.token": %w`, err)}
		}
	}
	if _, ok := jtc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`ent: missing required field "JwtToken.revoked"`)}
	}
	if len(jtc.mutation.ClaimsIDs()) == 0 {
		return &ValidationError{Name: "claims", err: errors.New(`ent: missing required edge "JwtToken.claims"`)}
	}
	return nil
}

func (jtc *JwtTokenCreate) sqlSave(ctx context.Context) (*JwtToken, error) {
	if err := jtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jtc.mutation.id = &_node.ID
	jtc.mutation.done = true
	return _node, nil
}

func (jtc *JwtTokenCreate) createSpec() (*JwtToken, *sqlgraph.CreateSpec) {
	var (
		_node = &JwtToken{config: jtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: jwttoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jwttoken.FieldID,
			},
		}
	)
	if value, ok := jtc.mutation.Token(); ok {
		_spec.SetField(jwttoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := jtc.mutation.Revoked(); ok {
		_spec.SetField(jwttoken.FieldRevoked, field.TypeBool, value)
		_node.Revoked = value
	}
	if nodes := jtc.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jwttoken.ClaimsTable,
			Columns: []string{jwttoken.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: claims.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JwtTokenCreateBulk is the builder for creating many JwtToken entities in bulk.
type JwtTokenCreateBulk struct {
	config
	builders []*JwtTokenCreate
}

// Save creates the JwtToken entities in the database.
func (jtcb *JwtTokenCreateBulk) Save(ctx context.Context) ([]*JwtToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jtcb.builders))
	nodes := make([]*JwtToken, len(jtcb.builders))
	mutators := make([]Mutator, len(jtcb.builders))
	for i := range jtcb.builders {
		func(i int, root context.Context) {
			builder := jtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JwtTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jtcb *JwtTokenCreateBulk) SaveX(ctx context.Context) []*JwtToken {
	v, err := jtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jtcb *JwtTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := jtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtcb *JwtTokenCreateBulk) ExecX(ctx context.Context) {
	if err := jtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
