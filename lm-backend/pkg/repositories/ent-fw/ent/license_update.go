// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/license"
	"license-manager/pkg/repositories/ent-fw/ent/organization"
	"license-manager/pkg/repositories/ent-fw/ent/predicate"
	"license-manager/pkg/repositories/ent-fw/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenseUpdate is the builder for updating License entities.
type LicenseUpdate struct {
	config
	hooks    []Hook
	mutation *LicenseMutation
}

// Where appends a list predicates to the LicenseUpdate builder.
func (lu *LicenseUpdate) Where(ps ...predicate.License) *LicenseUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetFeatures sets the "features" field.
func (lu *LicenseUpdate) SetFeatures(s string) *LicenseUpdate {
	lu.mutation.SetFeatures(s)
	return lu
}

// SetStatus sets the "status" field.
func (lu *LicenseUpdate) SetStatus(s string) *LicenseUpdate {
	lu.mutation.SetStatus(s)
	return lu
}

// SetVersion sets the "version" field.
func (lu *LicenseUpdate) SetVersion(s string) *LicenseUpdate {
	lu.mutation.SetVersion(s)
	return lu
}

// SetNote sets the "note" field.
func (lu *LicenseUpdate) SetNote(s string) *LicenseUpdate {
	lu.mutation.SetNote(s)
	return lu
}

// SetContact sets the "contact" field.
func (lu *LicenseUpdate) SetContact(s string) *LicenseUpdate {
	lu.mutation.SetContact(s)
	return lu
}

// SetMail sets the "mail" field.
func (lu *LicenseUpdate) SetMail(s string) *LicenseUpdate {
	lu.mutation.SetMail(s)
	return lu
}

// SetQuotas sets the "quotas" field.
func (lu *LicenseUpdate) SetQuotas(m map[string]string) *LicenseUpdate {
	lu.mutation.SetQuotas(m)
	return lu
}

// SetSecret sets the "secret" field.
func (lu *LicenseUpdate) SetSecret(s string) *LicenseUpdate {
	lu.mutation.SetSecret(s)
	return lu
}

// SetExpirationDate sets the "expiration_date" field.
func (lu *LicenseUpdate) SetExpirationDate(t time.Time) *LicenseUpdate {
	lu.mutation.SetExpirationDate(t)
	return lu
}

// SetActivationDate sets the "activation_date" field.
func (lu *LicenseUpdate) SetActivationDate(t time.Time) *LicenseUpdate {
	lu.mutation.SetActivationDate(t)
	return lu
}

// SetLastAccessed sets the "last_accessed" field.
func (lu *LicenseUpdate) SetLastAccessed(t time.Time) *LicenseUpdate {
	lu.mutation.SetLastAccessed(t)
	return lu
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableLastAccessed(t *time.Time) *LicenseUpdate {
	if t != nil {
		lu.SetLastAccessed(*t)
	}
	return lu
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (lu *LicenseUpdate) ClearLastAccessed() *LicenseUpdate {
	lu.mutation.ClearLastAccessed()
	return lu
}

// SetLastAccessIP sets the "last_access_IP" field.
func (lu *LicenseUpdate) SetLastAccessIP(s string) *LicenseUpdate {
	lu.mutation.SetLastAccessIP(s)
	return lu
}

// SetNillableLastAccessIP sets the "last_access_IP" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableLastAccessIP(s *string) *LicenseUpdate {
	if s != nil {
		lu.SetLastAccessIP(*s)
	}
	return lu
}

// ClearLastAccessIP clears the value of the "last_access_IP" field.
func (lu *LicenseUpdate) ClearLastAccessIP() *LicenseUpdate {
	lu.mutation.ClearLastAccessIP()
	return lu
}

// SetAccessCount sets the "access_count" field.
func (lu *LicenseUpdate) SetAccessCount(i int) *LicenseUpdate {
	lu.mutation.ResetAccessCount()
	lu.mutation.SetAccessCount(i)
	return lu
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableAccessCount(i *int) *LicenseUpdate {
	if i != nil {
		lu.SetAccessCount(*i)
	}
	return lu
}

// AddAccessCount adds i to the "access_count" field.
func (lu *LicenseUpdate) AddAccessCount(i int) *LicenseUpdate {
	lu.mutation.AddAccessCount(i)
	return lu
}

// SetDateCreated sets the "date_created" field.
func (lu *LicenseUpdate) SetDateCreated(t time.Time) *LicenseUpdate {
	lu.mutation.SetDateCreated(t)
	return lu
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableDateCreated(t *time.Time) *LicenseUpdate {
	if t != nil {
		lu.SetDateCreated(*t)
	}
	return lu
}

// SetLastUpdated sets the "last_updated" field.
func (lu *LicenseUpdate) SetLastUpdated(t time.Time) *LicenseUpdate {
	lu.mutation.SetLastUpdated(t)
	return lu
}

// AddLicenseProductIDs adds the "license_products" edge to the Product entity by IDs.
func (lu *LicenseUpdate) AddLicenseProductIDs(ids ...string) *LicenseUpdate {
	lu.mutation.AddLicenseProductIDs(ids...)
	return lu
}

// AddLicenseProducts adds the "license_products" edges to the Product entity.
func (lu *LicenseUpdate) AddLicenseProducts(p ...*Product) *LicenseUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddLicenseProductIDs(ids...)
}

// SetOwnerOrgID sets the "owner_org" edge to the Organization entity by ID.
func (lu *LicenseUpdate) SetOwnerOrgID(id string) *LicenseUpdate {
	lu.mutation.SetOwnerOrgID(id)
	return lu
}

// SetNillableOwnerOrgID sets the "owner_org" edge to the Organization entity by ID if the given value is not nil.
func (lu *LicenseUpdate) SetNillableOwnerOrgID(id *string) *LicenseUpdate {
	if id != nil {
		lu = lu.SetOwnerOrgID(*id)
	}
	return lu
}

// SetOwnerOrg sets the "owner_org" edge to the Organization entity.
func (lu *LicenseUpdate) SetOwnerOrg(o *Organization) *LicenseUpdate {
	return lu.SetOwnerOrgID(o.ID)
}

// Mutation returns the LicenseMutation object of the builder.
func (lu *LicenseUpdate) Mutation() *LicenseMutation {
	return lu.mutation
}

// ClearLicenseProducts clears all "license_products" edges to the Product entity.
func (lu *LicenseUpdate) ClearLicenseProducts() *LicenseUpdate {
	lu.mutation.ClearLicenseProducts()
	return lu
}

// RemoveLicenseProductIDs removes the "license_products" edge to Product entities by IDs.
func (lu *LicenseUpdate) RemoveLicenseProductIDs(ids ...string) *LicenseUpdate {
	lu.mutation.RemoveLicenseProductIDs(ids...)
	return lu
}

// RemoveLicenseProducts removes "license_products" edges to Product entities.
func (lu *LicenseUpdate) RemoveLicenseProducts(p ...*Product) *LicenseUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemoveLicenseProductIDs(ids...)
}

// ClearOwnerOrg clears the "owner_org" edge to the Organization entity.
func (lu *LicenseUpdate) ClearOwnerOrg() *LicenseUpdate {
	lu.mutation.ClearOwnerOrg()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LicenseUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks[int, LicenseMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LicenseUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LicenseUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LicenseUpdate) defaults() {
	if _, ok := lu.mutation.LastUpdated(); !ok {
		v := license.UpdateDefaultLastUpdated()
		lu.mutation.SetLastUpdated(v)
	}
}

func (lu *LicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   license.Table,
			Columns: license.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: license.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Features(); ok {
		_spec.SetField(license.FieldFeatures, field.TypeString, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(license.FieldStatus, field.TypeString, value)
	}
	if value, ok := lu.mutation.Version(); ok {
		_spec.SetField(license.FieldVersion, field.TypeString, value)
	}
	if value, ok := lu.mutation.Note(); ok {
		_spec.SetField(license.FieldNote, field.TypeString, value)
	}
	if value, ok := lu.mutation.Contact(); ok {
		_spec.SetField(license.FieldContact, field.TypeString, value)
	}
	if value, ok := lu.mutation.Mail(); ok {
		_spec.SetField(license.FieldMail, field.TypeString, value)
	}
	if value, ok := lu.mutation.Quotas(); ok {
		_spec.SetField(license.FieldQuotas, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.Secret(); ok {
		_spec.SetField(license.FieldSecret, field.TypeString, value)
	}
	if value, ok := lu.mutation.ExpirationDate(); ok {
		_spec.SetField(license.FieldExpirationDate, field.TypeTime, value)
	}
	if value, ok := lu.mutation.ActivationDate(); ok {
		_spec.SetField(license.FieldActivationDate, field.TypeTime, value)
	}
	if value, ok := lu.mutation.LastAccessed(); ok {
		_spec.SetField(license.FieldLastAccessed, field.TypeTime, value)
	}
	if lu.mutation.LastAccessedCleared() {
		_spec.ClearField(license.FieldLastAccessed, field.TypeTime)
	}
	if value, ok := lu.mutation.LastAccessIP(); ok {
		_spec.SetField(license.FieldLastAccessIP, field.TypeString, value)
	}
	if lu.mutation.LastAccessIPCleared() {
		_spec.ClearField(license.FieldLastAccessIP, field.TypeString)
	}
	if value, ok := lu.mutation.AccessCount(); ok {
		_spec.SetField(license.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedAccessCount(); ok {
		_spec.AddField(license.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := lu.mutation.DateCreated(); ok {
		_spec.SetField(license.FieldDateCreated, field.TypeTime, value)
	}
	if value, ok := lu.mutation.LastUpdated(); ok {
		_spec.SetField(license.FieldLastUpdated, field.TypeTime, value)
	}
	if lu.mutation.LicenseProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   license.LicenseProductsTable,
			Columns: license.LicenseProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLicenseProductsIDs(); len(nodes) > 0 && !lu.mutation.LicenseProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   license.LicenseProductsTable,
			Columns: license.LicenseProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LicenseProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   license.LicenseProductsTable,
			Columns: license.LicenseProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.OwnerOrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   license.OwnerOrgTable,
			Columns: []string{license.OwnerOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.OwnerOrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   license.OwnerOrgTable,
			Columns: []string{license.OwnerOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{license.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LicenseUpdateOne is the builder for updating a single License entity.
type LicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LicenseMutation
}

// SetFeatures sets the "features" field.
func (luo *LicenseUpdateOne) SetFeatures(s string) *LicenseUpdateOne {
	luo.mutation.SetFeatures(s)
	return luo
}

// SetStatus sets the "status" field.
func (luo *LicenseUpdateOne) SetStatus(s string) *LicenseUpdateOne {
	luo.mutation.SetStatus(s)
	return luo
}

// SetVersion sets the "version" field.
func (luo *LicenseUpdateOne) SetVersion(s string) *LicenseUpdateOne {
	luo.mutation.SetVersion(s)
	return luo
}

// SetNote sets the "note" field.
func (luo *LicenseUpdateOne) SetNote(s string) *LicenseUpdateOne {
	luo.mutation.SetNote(s)
	return luo
}

// SetContact sets the "contact" field.
func (luo *LicenseUpdateOne) SetContact(s string) *LicenseUpdateOne {
	luo.mutation.SetContact(s)
	return luo
}

// SetMail sets the "mail" field.
func (luo *LicenseUpdateOne) SetMail(s string) *LicenseUpdateOne {
	luo.mutation.SetMail(s)
	return luo
}

// SetQuotas sets the "quotas" field.
func (luo *LicenseUpdateOne) SetQuotas(m map[string]string) *LicenseUpdateOne {
	luo.mutation.SetQuotas(m)
	return luo
}

// SetSecret sets the "secret" field.
func (luo *LicenseUpdateOne) SetSecret(s string) *LicenseUpdateOne {
	luo.mutation.SetSecret(s)
	return luo
}

// SetExpirationDate sets the "expiration_date" field.
func (luo *LicenseUpdateOne) SetExpirationDate(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetExpirationDate(t)
	return luo
}

// SetActivationDate sets the "activation_date" field.
func (luo *LicenseUpdateOne) SetActivationDate(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetActivationDate(t)
	return luo
}

// SetLastAccessed sets the "last_accessed" field.
func (luo *LicenseUpdateOne) SetLastAccessed(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetLastAccessed(t)
	return luo
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableLastAccessed(t *time.Time) *LicenseUpdateOne {
	if t != nil {
		luo.SetLastAccessed(*t)
	}
	return luo
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (luo *LicenseUpdateOne) ClearLastAccessed() *LicenseUpdateOne {
	luo.mutation.ClearLastAccessed()
	return luo
}

// SetLastAccessIP sets the "last_access_IP" field.
func (luo *LicenseUpdateOne) SetLastAccessIP(s string) *LicenseUpdateOne {
	luo.mutation.SetLastAccessIP(s)
	return luo
}

// SetNillableLastAccessIP sets the "last_access_IP" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableLastAccessIP(s *string) *LicenseUpdateOne {
	if s != nil {
		luo.SetLastAccessIP(*s)
	}
	return luo
}

// ClearLastAccessIP clears the value of the "last_access_IP" field.
func (luo *LicenseUpdateOne) ClearLastAccessIP() *LicenseUpdateOne {
	luo.mutation.ClearLastAccessIP()
	return luo
}

// SetAccessCount sets the "access_count" field.
func (luo *LicenseUpdateOne) SetAccessCount(i int) *LicenseUpdateOne {
	luo.mutation.ResetAccessCount()
	luo.mutation.SetAccessCount(i)
	return luo
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableAccessCount(i *int) *LicenseUpdateOne {
	if i != nil {
		luo.SetAccessCount(*i)
	}
	return luo
}

// AddAccessCount adds i to the "access_count" field.
func (luo *LicenseUpdateOne) AddAccessCount(i int) *LicenseUpdateOne {
	luo.mutation.AddAccessCount(i)
	return luo
}

// SetDateCreated sets the "date_created" field.
func (luo *LicenseUpdateOne) SetDateCreated(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetDateCreated(t)
	return luo
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableDateCreated(t *time.Time) *LicenseUpdateOne {
	if t != nil {
		luo.SetDateCreated(*t)
	}
	return luo
}

// SetLastUpdated sets the "last_updated" field.
func (luo *LicenseUpdateOne) SetLastUpdated(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetLastUpdated(t)
	return luo
}

// AddLicenseProductIDs adds the "license_products" edge to the Product entity by IDs.
func (luo *LicenseUpdateOne) AddLicenseProductIDs(ids ...string) *LicenseUpdateOne {
	luo.mutation.AddLicenseProductIDs(ids...)
	return luo
}

// AddLicenseProducts adds the "license_products" edges to the Product entity.
func (luo *LicenseUpdateOne) AddLicenseProducts(p ...*Product) *LicenseUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddLicenseProductIDs(ids...)
}

// SetOwnerOrgID sets the "owner_org" edge to the Organization entity by ID.
func (luo *LicenseUpdateOne) SetOwnerOrgID(id string) *LicenseUpdateOne {
	luo.mutation.SetOwnerOrgID(id)
	return luo
}

// SetNillableOwnerOrgID sets the "owner_org" edge to the Organization entity by ID if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableOwnerOrgID(id *string) *LicenseUpdateOne {
	if id != nil {
		luo = luo.SetOwnerOrgID(*id)
	}
	return luo
}

// SetOwnerOrg sets the "owner_org" edge to the Organization entity.
func (luo *LicenseUpdateOne) SetOwnerOrg(o *Organization) *LicenseUpdateOne {
	return luo.SetOwnerOrgID(o.ID)
}

// Mutation returns the LicenseMutation object of the builder.
func (luo *LicenseUpdateOne) Mutation() *LicenseMutation {
	return luo.mutation
}

// ClearLicenseProducts clears all "license_products" edges to the Product entity.
func (luo *LicenseUpdateOne) ClearLicenseProducts() *LicenseUpdateOne {
	luo.mutation.ClearLicenseProducts()
	return luo
}

// RemoveLicenseProductIDs removes the "license_products" edge to Product entities by IDs.
func (luo *LicenseUpdateOne) RemoveLicenseProductIDs(ids ...string) *LicenseUpdateOne {
	luo.mutation.RemoveLicenseProductIDs(ids...)
	return luo
}

// RemoveLicenseProducts removes "license_products" edges to Product entities.
func (luo *LicenseUpdateOne) RemoveLicenseProducts(p ...*Product) *LicenseUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemoveLicenseProductIDs(ids...)
}

// ClearOwnerOrg clears the "owner_org" edge to the Organization entity.
func (luo *LicenseUpdateOne) ClearOwnerOrg() *LicenseUpdateOne {
	luo.mutation.ClearOwnerOrg()
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LicenseUpdateOne) Select(field string, fields ...string) *LicenseUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated License entity.
func (luo *LicenseUpdateOne) Save(ctx context.Context) (*License, error) {
	luo.defaults()
	return withHooks[*License, LicenseMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LicenseUpdateOne) SaveX(ctx context.Context) *License {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LicenseUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LicenseUpdateOne) defaults() {
	if _, ok := luo.mutation.LastUpdated(); !ok {
		v := license.UpdateDefaultLastUpdated()
		luo.mutation.SetLastUpdated(v)
	}
}

func (luo *LicenseUpdateOne) sqlSave(ctx context.Context) (_node *License, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   license.Table,
			Columns: license.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: license.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "License.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, license.FieldID)
		for _, f := range fields {
			if !license.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != license.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Features(); ok {
		_spec.SetField(license.FieldFeatures, field.TypeString, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(license.FieldStatus, field.TypeString, value)
	}
	if value, ok := luo.mutation.Version(); ok {
		_spec.SetField(license.FieldVersion, field.TypeString, value)
	}
	if value, ok := luo.mutation.Note(); ok {
		_spec.SetField(license.FieldNote, field.TypeString, value)
	}
	if value, ok := luo.mutation.Contact(); ok {
		_spec.SetField(license.FieldContact, field.TypeString, value)
	}
	if value, ok := luo.mutation.Mail(); ok {
		_spec.SetField(license.FieldMail, field.TypeString, value)
	}
	if value, ok := luo.mutation.Quotas(); ok {
		_spec.SetField(license.FieldQuotas, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.Secret(); ok {
		_spec.SetField(license.FieldSecret, field.TypeString, value)
	}
	if value, ok := luo.mutation.ExpirationDate(); ok {
		_spec.SetField(license.FieldExpirationDate, field.TypeTime, value)
	}
	if value, ok := luo.mutation.ActivationDate(); ok {
		_spec.SetField(license.FieldActivationDate, field.TypeTime, value)
	}
	if value, ok := luo.mutation.LastAccessed(); ok {
		_spec.SetField(license.FieldLastAccessed, field.TypeTime, value)
	}
	if luo.mutation.LastAccessedCleared() {
		_spec.ClearField(license.FieldLastAccessed, field.TypeTime)
	}
	if value, ok := luo.mutation.LastAccessIP(); ok {
		_spec.SetField(license.FieldLastAccessIP, field.TypeString, value)
	}
	if luo.mutation.LastAccessIPCleared() {
		_spec.ClearField(license.FieldLastAccessIP, field.TypeString)
	}
	if value, ok := luo.mutation.AccessCount(); ok {
		_spec.SetField(license.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedAccessCount(); ok {
		_spec.AddField(license.FieldAccessCount, field.TypeInt, value)
	}
	if value, ok := luo.mutation.DateCreated(); ok {
		_spec.SetField(license.FieldDateCreated, field.TypeTime, value)
	}
	if value, ok := luo.mutation.LastUpdated(); ok {
		_spec.SetField(license.FieldLastUpdated, field.TypeTime, value)
	}
	if luo.mutation.LicenseProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   license.LicenseProductsTable,
			Columns: license.LicenseProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLicenseProductsIDs(); len(nodes) > 0 && !luo.mutation.LicenseProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   license.LicenseProductsTable,
			Columns: license.LicenseProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LicenseProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   license.LicenseProductsTable,
			Columns: license.LicenseProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.OwnerOrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   license.OwnerOrgTable,
			Columns: []string{license.OwnerOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.OwnerOrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   license.OwnerOrgTable,
			Columns: []string{license.OwnerOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &License{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{license.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
