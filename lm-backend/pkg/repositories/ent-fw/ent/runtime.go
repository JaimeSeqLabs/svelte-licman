// Code generated by ent, DO NOT EDIT.

package ent

import (
	"license-manager/pkg/repositories/ent-fw/ent/contact"
	"license-manager/pkg/repositories/ent-fw/ent/organization"
	"license-manager/pkg/repositories/ent-fw/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contactFields := schema.Contact{}.Fields()
	_ = contactFields
	// contactDescName is the schema descriptor for name field.
	contactDescName := contactFields[0].Descriptor()
	// contact.NameValidator is a validator for the "name" field. It is called by the builders before save.
	contact.NameValidator = contactDescName.Validators[0].(func(string) error)
	// contactDescMail is the schema descriptor for mail field.
	contactDescMail := contactFields[1].Descriptor()
	// contact.MailValidator is a validator for the "mail" field. It is called by the builders before save.
	contact.MailValidator = contactDescMail.Validators[0].(func(string) error)
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescName is the schema descriptor for name field.
	organizationDescName := organizationFields[0].Descriptor()
	// organization.NameValidator is a validator for the "name" field. It is called by the builders before save.
	organization.NameValidator = organizationDescName.Validators[0].(func(string) error)
	// organizationDescLocation is the schema descriptor for location field.
	organizationDescLocation := organizationFields[1].Descriptor()
	// organization.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	organization.LocationValidator = organizationDescLocation.Validators[0].(func(string) error)
}
