// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/claims"
	"license-manager/pkg/repositories/ent-fw/ent/credentials"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClaimsCreate is the builder for creating a Claims entity.
type ClaimsCreate struct {
	config
	mutation *ClaimsMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (cc *ClaimsCreate) SetKey(s string) *ClaimsCreate {
	cc.mutation.SetKey(s)
	return cc
}

// SetValue sets the "value" field.
func (cc *ClaimsCreate) SetValue(s string) *ClaimsCreate {
	cc.mutation.SetValue(s)
	return cc
}

// SetClaimerID sets the "claimer" edge to the Credentials entity by ID.
func (cc *ClaimsCreate) SetClaimerID(id int) *ClaimsCreate {
	cc.mutation.SetClaimerID(id)
	return cc
}

// SetNillableClaimerID sets the "claimer" edge to the Credentials entity by ID if the given value is not nil.
func (cc *ClaimsCreate) SetNillableClaimerID(id *int) *ClaimsCreate {
	if id != nil {
		cc = cc.SetClaimerID(*id)
	}
	return cc
}

// SetClaimer sets the "claimer" edge to the Credentials entity.
func (cc *ClaimsCreate) SetClaimer(c *Credentials) *ClaimsCreate {
	return cc.SetClaimerID(c.ID)
}

// Mutation returns the ClaimsMutation object of the builder.
func (cc *ClaimsCreate) Mutation() *ClaimsMutation {
	return cc.mutation
}

// Save creates the Claims in the database.
func (cc *ClaimsCreate) Save(ctx context.Context) (*Claims, error) {
	return withHooks[*Claims, ClaimsMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClaimsCreate) SaveX(ctx context.Context) *Claims {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClaimsCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClaimsCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClaimsCreate) check() error {
	if _, ok := cc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Claims.key"`)}
	}
	if v, ok := cc.mutation.Key(); ok {
		if err := claims.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Claims.key": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Claims.value"`)}
	}
	if v, ok := cc.mutation.Value(); ok {
		if err := claims.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Claims.value": %w`, err)}
		}
	}
	return nil
}

func (cc *ClaimsCreate) sqlSave(ctx context.Context) (*Claims, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClaimsCreate) createSpec() (*Claims, *sqlgraph.CreateSpec) {
	var (
		_node = &Claims{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: claims.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: claims.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Key(); ok {
		_spec.SetField(claims.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.SetField(claims.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := cc.mutation.ClaimerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   claims.ClaimerTable,
			Columns: []string{claims.ClaimerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credentials.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.credentials_claims = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClaimsCreateBulk is the builder for creating many Claims entities in bulk.
type ClaimsCreateBulk struct {
	config
	builders []*ClaimsCreate
}

// Save creates the Claims entities in the database.
func (ccb *ClaimsCreateBulk) Save(ctx context.Context) ([]*Claims, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Claims, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClaimsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClaimsCreateBulk) SaveX(ctx context.Context) []*Claims {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClaimsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClaimsCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
