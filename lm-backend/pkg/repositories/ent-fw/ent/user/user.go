// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldClaims holds the string denoting the claims field in the database.
	FieldClaims = "claims"
	// EdgeIssued holds the string denoting the issued edge name in mutations.
	EdgeIssued = "issued"
	// Table holds the table name of the user in the database.
	Table = "users"
	// IssuedTable is the table that holds the issued relation/edge.
	IssuedTable = "jwt_tokens"
	// IssuedInverseTable is the table name for the JwtToken entity.
	// It exists in this package in order to avoid circular dependency with the "jwttoken" package.
	IssuedInverseTable = "jwt_tokens"
	// IssuedColumn is the table column denoting the issued relation/edge.
	IssuedColumn = "user_issued"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldMail,
	FieldPasswordHash,
	FieldClaims,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// MailValidator is a validator for the "mail" field. It is called by the builders before save.
	MailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
)
