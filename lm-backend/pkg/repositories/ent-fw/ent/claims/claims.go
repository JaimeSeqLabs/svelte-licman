// Code generated by ent, DO NOT EDIT.

package claims

const (
	// Label holds the string label denoting the claims type in the database.
	Label = "claims"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeClaimer holds the string denoting the claimer edge name in mutations.
	EdgeClaimer = "claimer"
	// Table holds the table name of the claims in the database.
	Table = "claims"
	// ClaimerTable is the table that holds the claimer relation/edge.
	ClaimerTable = "claims"
	// ClaimerInverseTable is the table name for the Credentials entity.
	// It exists in this package in order to avoid circular dependency with the "credentials" package.
	ClaimerInverseTable = "credentials"
	// ClaimerColumn is the table column denoting the claimer relation/edge.
	ClaimerColumn = "credentials_claims"
)

// Columns holds all SQL columns for claims fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "claims"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"credentials_claims",
	"jwt_token_claims",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
)
