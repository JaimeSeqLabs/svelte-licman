// Code generated by ent, DO NOT EDIT.

package product

import (
	"license-manager/pkg/repositories/ent-fw/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSku, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// InstallInstr applies equality check predicate on the "install_instr" field. It's identical to InstallInstrEQ.
func InstallInstr(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldInstallInstr, v))
}

// LicenseCount applies equality check predicate on the "license_count" field. It's identical to LicenseCountEQ.
func LicenseCount(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldLicenseCount, v))
}

// DateCreated applies equality check predicate on the "date_created" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDateCreated, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldLastUpdated, v))
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSku, v))
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldSku, v))
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldSku, vs...))
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldSku, vs...))
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldSku, v))
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldSku, v))
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldSku, v))
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldSku, v))
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldSku, v))
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldSku, v))
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldSku, v))
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldSku, v))
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldSku, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldName, v))
}

// InstallInstrEQ applies the EQ predicate on the "install_instr" field.
func InstallInstrEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldInstallInstr, v))
}

// InstallInstrNEQ applies the NEQ predicate on the "install_instr" field.
func InstallInstrNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldInstallInstr, v))
}

// InstallInstrIn applies the In predicate on the "install_instr" field.
func InstallInstrIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldInstallInstr, vs...))
}

// InstallInstrNotIn applies the NotIn predicate on the "install_instr" field.
func InstallInstrNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldInstallInstr, vs...))
}

// InstallInstrGT applies the GT predicate on the "install_instr" field.
func InstallInstrGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldInstallInstr, v))
}

// InstallInstrGTE applies the GTE predicate on the "install_instr" field.
func InstallInstrGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldInstallInstr, v))
}

// InstallInstrLT applies the LT predicate on the "install_instr" field.
func InstallInstrLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldInstallInstr, v))
}

// InstallInstrLTE applies the LTE predicate on the "install_instr" field.
func InstallInstrLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldInstallInstr, v))
}

// InstallInstrContains applies the Contains predicate on the "install_instr" field.
func InstallInstrContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldInstallInstr, v))
}

// InstallInstrHasPrefix applies the HasPrefix predicate on the "install_instr" field.
func InstallInstrHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldInstallInstr, v))
}

// InstallInstrHasSuffix applies the HasSuffix predicate on the "install_instr" field.
func InstallInstrHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldInstallInstr, v))
}

// InstallInstrEqualFold applies the EqualFold predicate on the "install_instr" field.
func InstallInstrEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldInstallInstr, v))
}

// InstallInstrContainsFold applies the ContainsFold predicate on the "install_instr" field.
func InstallInstrContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldInstallInstr, v))
}

// LicenseCountEQ applies the EQ predicate on the "license_count" field.
func LicenseCountEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldLicenseCount, v))
}

// LicenseCountNEQ applies the NEQ predicate on the "license_count" field.
func LicenseCountNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldLicenseCount, v))
}

// LicenseCountIn applies the In predicate on the "license_count" field.
func LicenseCountIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldLicenseCount, vs...))
}

// LicenseCountNotIn applies the NotIn predicate on the "license_count" field.
func LicenseCountNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldLicenseCount, vs...))
}

// LicenseCountGT applies the GT predicate on the "license_count" field.
func LicenseCountGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldLicenseCount, v))
}

// LicenseCountGTE applies the GTE predicate on the "license_count" field.
func LicenseCountGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldLicenseCount, v))
}

// LicenseCountLT applies the LT predicate on the "license_count" field.
func LicenseCountLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldLicenseCount, v))
}

// LicenseCountLTE applies the LTE predicate on the "license_count" field.
func LicenseCountLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldLicenseCount, v))
}

// DateCreatedEQ applies the EQ predicate on the "date_created" field.
func DateCreatedEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "date_created" field.
func DateCreatedNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "date_created" field.
func DateCreatedIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "date_created" field.
func DateCreatedNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "date_created" field.
func DateCreatedGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "date_created" field.
func DateCreatedGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "date_created" field.
func DateCreatedLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "date_created" field.
func DateCreatedLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDateCreated, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldLastUpdated, v))
}

// HasLicense applies the HasEdge predicate on the "license" edge.
func HasLicense() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LicenseTable, LicensePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseWith applies the HasEdge predicate on the "license" edge with a given conditions (other predicates).
func HasLicenseWith(preds ...predicate.License) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LicenseTable, LicensePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
