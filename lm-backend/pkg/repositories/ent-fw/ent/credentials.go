// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/credentials"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Credentials is the model entity for the Credentials schema.
type Credentials struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// Claims holds the value of the "claims" field.
	Claims map[string]interface{} `json:"claims,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Credentials) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case credentials.FieldClaims:
			values[i] = new([]byte)
		case credentials.FieldID:
			values[i] = new(sql.NullInt64)
		case credentials.FieldUsername, credentials.FieldPasswordHash:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Credentials", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Credentials fields.
func (c *Credentials) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case credentials.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case credentials.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				c.Username = value.String
			}
		case credentials.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				c.PasswordHash = value.String
			}
		case credentials.FieldClaims:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field claims", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Claims); err != nil {
					return fmt.Errorf("unmarshal field claims: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Credentials.
// Note that you need to call Credentials.Unwrap() before calling this method if this Credentials
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Credentials) Update() *CredentialsUpdateOne {
	return NewCredentialsClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Credentials entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Credentials) Unwrap() *Credentials {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Credentials is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Credentials) String() string {
	var builder strings.Builder
	builder.WriteString("Credentials(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("username=")
	builder.WriteString(c.Username)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(c.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("claims=")
	builder.WriteString(fmt.Sprintf("%v", c.Claims))
	builder.WriteByte(')')
	return builder.String()
}

// CredentialsSlice is a parsable slice of Credentials.
type CredentialsSlice []*Credentials

func (c CredentialsSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
