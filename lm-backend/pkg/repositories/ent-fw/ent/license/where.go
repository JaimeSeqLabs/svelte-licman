// Code generated by ent, DO NOT EDIT.

package license

import (
	"license-manager/pkg/repositories/ent-fw/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.License {
	return predicate.License(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.License {
	return predicate.License(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldID, id))
}

// Features applies equality check predicate on the "features" field. It's identical to FeaturesEQ.
func Features(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldFeatures, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldStatus, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldVersion, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldNote, v))
}

// Contact applies equality check predicate on the "contact" field. It's identical to ContactEQ.
func Contact(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldContact, v))
}

// Mail applies equality check predicate on the "mail" field. It's identical to MailEQ.
func Mail(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldMail, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldSecret, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldExpirationDate, v))
}

// ActivationDate applies equality check predicate on the "activation_date" field. It's identical to ActivationDateEQ.
func ActivationDate(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldActivationDate, v))
}

// LastAccessed applies equality check predicate on the "last_accessed" field. It's identical to LastAccessedEQ.
func LastAccessed(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldLastAccessed, v))
}

// LastAccessIP applies equality check predicate on the "last_access_IP" field. It's identical to LastAccessIPEQ.
func LastAccessIP(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldLastAccessIP, v))
}

// AccessCount applies equality check predicate on the "access_count" field. It's identical to AccessCountEQ.
func AccessCount(v int) predicate.License {
	return predicate.License(sql.FieldEQ(FieldAccessCount, v))
}

// DateCreated applies equality check predicate on the "date_created" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldDateCreated, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldLastUpdated, v))
}

// FeaturesEQ applies the EQ predicate on the "features" field.
func FeaturesEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldFeatures, v))
}

// FeaturesNEQ applies the NEQ predicate on the "features" field.
func FeaturesNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldFeatures, v))
}

// FeaturesIn applies the In predicate on the "features" field.
func FeaturesIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldFeatures, vs...))
}

// FeaturesNotIn applies the NotIn predicate on the "features" field.
func FeaturesNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldFeatures, vs...))
}

// FeaturesGT applies the GT predicate on the "features" field.
func FeaturesGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldFeatures, v))
}

// FeaturesGTE applies the GTE predicate on the "features" field.
func FeaturesGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldFeatures, v))
}

// FeaturesLT applies the LT predicate on the "features" field.
func FeaturesLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldFeatures, v))
}

// FeaturesLTE applies the LTE predicate on the "features" field.
func FeaturesLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldFeatures, v))
}

// FeaturesContains applies the Contains predicate on the "features" field.
func FeaturesContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldFeatures, v))
}

// FeaturesHasPrefix applies the HasPrefix predicate on the "features" field.
func FeaturesHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldFeatures, v))
}

// FeaturesHasSuffix applies the HasSuffix predicate on the "features" field.
func FeaturesHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldFeatures, v))
}

// FeaturesEqualFold applies the EqualFold predicate on the "features" field.
func FeaturesEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldFeatures, v))
}

// FeaturesContainsFold applies the ContainsFold predicate on the "features" field.
func FeaturesContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldFeatures, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldStatus, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldVersion, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldNote, v))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldNote, v))
}

// ContactEQ applies the EQ predicate on the "contact" field.
func ContactEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldContact, v))
}

// ContactNEQ applies the NEQ predicate on the "contact" field.
func ContactNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldContact, v))
}

// ContactIn applies the In predicate on the "contact" field.
func ContactIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldContact, vs...))
}

// ContactNotIn applies the NotIn predicate on the "contact" field.
func ContactNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldContact, vs...))
}

// ContactGT applies the GT predicate on the "contact" field.
func ContactGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldContact, v))
}

// ContactGTE applies the GTE predicate on the "contact" field.
func ContactGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldContact, v))
}

// ContactLT applies the LT predicate on the "contact" field.
func ContactLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldContact, v))
}

// ContactLTE applies the LTE predicate on the "contact" field.
func ContactLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldContact, v))
}

// ContactContains applies the Contains predicate on the "contact" field.
func ContactContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldContact, v))
}

// ContactHasPrefix applies the HasPrefix predicate on the "contact" field.
func ContactHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldContact, v))
}

// ContactHasSuffix applies the HasSuffix predicate on the "contact" field.
func ContactHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldContact, v))
}

// ContactEqualFold applies the EqualFold predicate on the "contact" field.
func ContactEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldContact, v))
}

// ContactContainsFold applies the ContainsFold predicate on the "contact" field.
func ContactContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldContact, v))
}

// MailEQ applies the EQ predicate on the "mail" field.
func MailEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldMail, v))
}

// MailNEQ applies the NEQ predicate on the "mail" field.
func MailNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldMail, v))
}

// MailIn applies the In predicate on the "mail" field.
func MailIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldMail, vs...))
}

// MailNotIn applies the NotIn predicate on the "mail" field.
func MailNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldMail, vs...))
}

// MailGT applies the GT predicate on the "mail" field.
func MailGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldMail, v))
}

// MailGTE applies the GTE predicate on the "mail" field.
func MailGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldMail, v))
}

// MailLT applies the LT predicate on the "mail" field.
func MailLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldMail, v))
}

// MailLTE applies the LTE predicate on the "mail" field.
func MailLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldMail, v))
}

// MailContains applies the Contains predicate on the "mail" field.
func MailContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldMail, v))
}

// MailHasPrefix applies the HasPrefix predicate on the "mail" field.
func MailHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldMail, v))
}

// MailHasSuffix applies the HasSuffix predicate on the "mail" field.
func MailHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldMail, v))
}

// MailEqualFold applies the EqualFold predicate on the "mail" field.
func MailEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldMail, v))
}

// MailContainsFold applies the ContainsFold predicate on the "mail" field.
func MailContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldMail, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldSecret, v))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.License {
	return predicate.License(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.License {
	return predicate.License(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldLTE(FieldExpirationDate, v))
}

// ActivationDateEQ applies the EQ predicate on the "activation_date" field.
func ActivationDateEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldActivationDate, v))
}

// ActivationDateNEQ applies the NEQ predicate on the "activation_date" field.
func ActivationDateNEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldActivationDate, v))
}

// ActivationDateIn applies the In predicate on the "activation_date" field.
func ActivationDateIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldIn(FieldActivationDate, vs...))
}

// ActivationDateNotIn applies the NotIn predicate on the "activation_date" field.
func ActivationDateNotIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldActivationDate, vs...))
}

// ActivationDateGT applies the GT predicate on the "activation_date" field.
func ActivationDateGT(v time.Time) predicate.License {
	return predicate.License(sql.FieldGT(FieldActivationDate, v))
}

// ActivationDateGTE applies the GTE predicate on the "activation_date" field.
func ActivationDateGTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldGTE(FieldActivationDate, v))
}

// ActivationDateLT applies the LT predicate on the "activation_date" field.
func ActivationDateLT(v time.Time) predicate.License {
	return predicate.License(sql.FieldLT(FieldActivationDate, v))
}

// ActivationDateLTE applies the LTE predicate on the "activation_date" field.
func ActivationDateLTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldLTE(FieldActivationDate, v))
}

// LastAccessedEQ applies the EQ predicate on the "last_accessed" field.
func LastAccessedEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldLastAccessed, v))
}

// LastAccessedNEQ applies the NEQ predicate on the "last_accessed" field.
func LastAccessedNEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldLastAccessed, v))
}

// LastAccessedIn applies the In predicate on the "last_accessed" field.
func LastAccessedIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldIn(FieldLastAccessed, vs...))
}

// LastAccessedNotIn applies the NotIn predicate on the "last_accessed" field.
func LastAccessedNotIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldLastAccessed, vs...))
}

// LastAccessedGT applies the GT predicate on the "last_accessed" field.
func LastAccessedGT(v time.Time) predicate.License {
	return predicate.License(sql.FieldGT(FieldLastAccessed, v))
}

// LastAccessedGTE applies the GTE predicate on the "last_accessed" field.
func LastAccessedGTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldGTE(FieldLastAccessed, v))
}

// LastAccessedLT applies the LT predicate on the "last_accessed" field.
func LastAccessedLT(v time.Time) predicate.License {
	return predicate.License(sql.FieldLT(FieldLastAccessed, v))
}

// LastAccessedLTE applies the LTE predicate on the "last_accessed" field.
func LastAccessedLTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldLTE(FieldLastAccessed, v))
}

// LastAccessedIsNil applies the IsNil predicate on the "last_accessed" field.
func LastAccessedIsNil() predicate.License {
	return predicate.License(sql.FieldIsNull(FieldLastAccessed))
}

// LastAccessedNotNil applies the NotNil predicate on the "last_accessed" field.
func LastAccessedNotNil() predicate.License {
	return predicate.License(sql.FieldNotNull(FieldLastAccessed))
}

// LastAccessIPEQ applies the EQ predicate on the "last_access_IP" field.
func LastAccessIPEQ(v string) predicate.License {
	return predicate.License(sql.FieldEQ(FieldLastAccessIP, v))
}

// LastAccessIPNEQ applies the NEQ predicate on the "last_access_IP" field.
func LastAccessIPNEQ(v string) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldLastAccessIP, v))
}

// LastAccessIPIn applies the In predicate on the "last_access_IP" field.
func LastAccessIPIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldIn(FieldLastAccessIP, vs...))
}

// LastAccessIPNotIn applies the NotIn predicate on the "last_access_IP" field.
func LastAccessIPNotIn(vs ...string) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldLastAccessIP, vs...))
}

// LastAccessIPGT applies the GT predicate on the "last_access_IP" field.
func LastAccessIPGT(v string) predicate.License {
	return predicate.License(sql.FieldGT(FieldLastAccessIP, v))
}

// LastAccessIPGTE applies the GTE predicate on the "last_access_IP" field.
func LastAccessIPGTE(v string) predicate.License {
	return predicate.License(sql.FieldGTE(FieldLastAccessIP, v))
}

// LastAccessIPLT applies the LT predicate on the "last_access_IP" field.
func LastAccessIPLT(v string) predicate.License {
	return predicate.License(sql.FieldLT(FieldLastAccessIP, v))
}

// LastAccessIPLTE applies the LTE predicate on the "last_access_IP" field.
func LastAccessIPLTE(v string) predicate.License {
	return predicate.License(sql.FieldLTE(FieldLastAccessIP, v))
}

// LastAccessIPContains applies the Contains predicate on the "last_access_IP" field.
func LastAccessIPContains(v string) predicate.License {
	return predicate.License(sql.FieldContains(FieldLastAccessIP, v))
}

// LastAccessIPHasPrefix applies the HasPrefix predicate on the "last_access_IP" field.
func LastAccessIPHasPrefix(v string) predicate.License {
	return predicate.License(sql.FieldHasPrefix(FieldLastAccessIP, v))
}

// LastAccessIPHasSuffix applies the HasSuffix predicate on the "last_access_IP" field.
func LastAccessIPHasSuffix(v string) predicate.License {
	return predicate.License(sql.FieldHasSuffix(FieldLastAccessIP, v))
}

// LastAccessIPIsNil applies the IsNil predicate on the "last_access_IP" field.
func LastAccessIPIsNil() predicate.License {
	return predicate.License(sql.FieldIsNull(FieldLastAccessIP))
}

// LastAccessIPNotNil applies the NotNil predicate on the "last_access_IP" field.
func LastAccessIPNotNil() predicate.License {
	return predicate.License(sql.FieldNotNull(FieldLastAccessIP))
}

// LastAccessIPEqualFold applies the EqualFold predicate on the "last_access_IP" field.
func LastAccessIPEqualFold(v string) predicate.License {
	return predicate.License(sql.FieldEqualFold(FieldLastAccessIP, v))
}

// LastAccessIPContainsFold applies the ContainsFold predicate on the "last_access_IP" field.
func LastAccessIPContainsFold(v string) predicate.License {
	return predicate.License(sql.FieldContainsFold(FieldLastAccessIP, v))
}

// AccessCountEQ applies the EQ predicate on the "access_count" field.
func AccessCountEQ(v int) predicate.License {
	return predicate.License(sql.FieldEQ(FieldAccessCount, v))
}

// AccessCountNEQ applies the NEQ predicate on the "access_count" field.
func AccessCountNEQ(v int) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldAccessCount, v))
}

// AccessCountIn applies the In predicate on the "access_count" field.
func AccessCountIn(vs ...int) predicate.License {
	return predicate.License(sql.FieldIn(FieldAccessCount, vs...))
}

// AccessCountNotIn applies the NotIn predicate on the "access_count" field.
func AccessCountNotIn(vs ...int) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldAccessCount, vs...))
}

// AccessCountGT applies the GT predicate on the "access_count" field.
func AccessCountGT(v int) predicate.License {
	return predicate.License(sql.FieldGT(FieldAccessCount, v))
}

// AccessCountGTE applies the GTE predicate on the "access_count" field.
func AccessCountGTE(v int) predicate.License {
	return predicate.License(sql.FieldGTE(FieldAccessCount, v))
}

// AccessCountLT applies the LT predicate on the "access_count" field.
func AccessCountLT(v int) predicate.License {
	return predicate.License(sql.FieldLT(FieldAccessCount, v))
}

// AccessCountLTE applies the LTE predicate on the "access_count" field.
func AccessCountLTE(v int) predicate.License {
	return predicate.License(sql.FieldLTE(FieldAccessCount, v))
}

// DateCreatedEQ applies the EQ predicate on the "date_created" field.
func DateCreatedEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "date_created" field.
func DateCreatedNEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "date_created" field.
func DateCreatedIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "date_created" field.
func DateCreatedNotIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "date_created" field.
func DateCreatedGT(v time.Time) predicate.License {
	return predicate.License(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "date_created" field.
func DateCreatedGTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "date_created" field.
func DateCreatedLT(v time.Time) predicate.License {
	return predicate.License(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "date_created" field.
func DateCreatedLTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldLTE(FieldDateCreated, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.License {
	return predicate.License(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.License {
	return predicate.License(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.License {
	return predicate.License(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.License {
	return predicate.License(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.License {
	return predicate.License(sql.FieldLTE(FieldLastUpdated, v))
}

// HasLicenseProducts applies the HasEdge predicate on the "license_products" edge.
func HasLicenseProducts() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LicenseProductsTable, LicenseProductsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseProductsWith applies the HasEdge predicate on the "license_products" edge with a given conditions (other predicates).
func HasLicenseProductsWith(preds ...predicate.Product) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LicenseProductsTable, LicenseProductsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnerOrg applies the HasEdge predicate on the "owner_org" edge.
func HasOwnerOrg() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerOrgTable, OwnerOrgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerOrgWith applies the HasEdge predicate on the "owner_org" edge with a given conditions (other predicates).
func HasOwnerOrgWith(preds ...predicate.Organization) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerOrgInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerOrgTable, OwnerOrgColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		p(s.Not())
	})
}
