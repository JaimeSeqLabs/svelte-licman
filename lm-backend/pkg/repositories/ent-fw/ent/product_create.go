// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/repositories/ent-fw/ent/product"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetSku sets the "sku" field.
func (pc *ProductCreate) SetSku(s string) *ProductCreate {
	pc.mutation.SetSku(s)
	return pc
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetInstallInstr sets the "install_instr" field.
func (pc *ProductCreate) SetInstallInstr(s string) *ProductCreate {
	pc.mutation.SetInstallInstr(s)
	return pc
}

// SetNillableInstallInstr sets the "install_instr" field if the given value is not nil.
func (pc *ProductCreate) SetNillableInstallInstr(s *string) *ProductCreate {
	if s != nil {
		pc.SetInstallInstr(*s)
	}
	return pc
}

// SetLicenseCount sets the "license_count" field.
func (pc *ProductCreate) SetLicenseCount(i int) *ProductCreate {
	pc.mutation.SetLicenseCount(i)
	return pc
}

// SetNillableLicenseCount sets the "license_count" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLicenseCount(i *int) *ProductCreate {
	if i != nil {
		pc.SetLicenseCount(*i)
	}
	return pc
}

// SetDateCreated sets the "date_created" field.
func (pc *ProductCreate) SetDateCreated(t time.Time) *ProductCreate {
	pc.mutation.SetDateCreated(t)
	return pc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDateCreated(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetDateCreated(*t)
	}
	return pc
}

// SetLastUpdated sets the "last_updated" field.
func (pc *ProductCreate) SetLastUpdated(t time.Time) *ProductCreate {
	pc.mutation.SetLastUpdated(t)
	return pc
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLastUpdated(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetLastUpdated(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(s string) *ProductCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableID(s *string) *ProductCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks[*Product, ProductMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.InstallInstr(); !ok {
		v := product.DefaultInstallInstr
		pc.mutation.SetInstallInstr(v)
	}
	if _, ok := pc.mutation.LicenseCount(); !ok {
		v := product.DefaultLicenseCount
		pc.mutation.SetLicenseCount(v)
	}
	if _, ok := pc.mutation.DateCreated(); !ok {
		v := product.DefaultDateCreated()
		pc.mutation.SetDateCreated(v)
	}
	if _, ok := pc.mutation.LastUpdated(); !ok {
		v := product.DefaultLastUpdated()
		pc.mutation.SetLastUpdated(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := product.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`ent: missing required field "Product.sku"`)}
	}
	if v, ok := pc.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Product.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.InstallInstr(); !ok {
		return &ValidationError{Name: "install_instr", err: errors.New(`ent: missing required field "Product.install_instr"`)}
	}
	if _, ok := pc.mutation.LicenseCount(); !ok {
		return &ValidationError{Name: "license_count", err: errors.New(`ent: missing required field "Product.license_count"`)}
	}
	if _, ok := pc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "Product.date_created"`)}
	}
	if _, ok := pc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "Product.last_updated"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Product.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: product.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.InstallInstr(); ok {
		_spec.SetField(product.FieldInstallInstr, field.TypeString, value)
		_node.InstallInstr = value
	}
	if value, ok := pc.mutation.LicenseCount(); ok {
		_spec.SetField(product.FieldLicenseCount, field.TypeInt, value)
		_node.LicenseCount = value
	}
	if value, ok := pc.mutation.DateCreated(); ok {
		_spec.SetField(product.FieldDateCreated, field.TypeTime, value)
		_node.DateCreated = value
	}
	if value, ok := pc.mutation.LastUpdated(); ok {
		_spec.SetField(product.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
