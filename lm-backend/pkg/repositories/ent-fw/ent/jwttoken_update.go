// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"license-manager/pkg/domain"
	"license-manager/pkg/repositories/ent-fw/ent/jwttoken"
	"license-manager/pkg/repositories/ent-fw/ent/predicate"
	"license-manager/pkg/repositories/ent-fw/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JwtTokenUpdate is the builder for updating JwtToken entities.
type JwtTokenUpdate struct {
	config
	hooks    []Hook
	mutation *JwtTokenMutation
}

// Where appends a list predicates to the JwtTokenUpdate builder.
func (jtu *JwtTokenUpdate) Where(ps ...predicate.JwtToken) *JwtTokenUpdate {
	jtu.mutation.Where(ps...)
	return jtu
}

// SetToken sets the "token" field.
func (jtu *JwtTokenUpdate) SetToken(s string) *JwtTokenUpdate {
	jtu.mutation.SetToken(s)
	return jtu
}

// SetRevoked sets the "revoked" field.
func (jtu *JwtTokenUpdate) SetRevoked(b bool) *JwtTokenUpdate {
	jtu.mutation.SetRevoked(b)
	return jtu
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableRevoked(b *bool) *JwtTokenUpdate {
	if b != nil {
		jtu.SetRevoked(*b)
	}
	return jtu
}

// SetClaims sets the "claims" field.
func (jtu *JwtTokenUpdate) SetClaims(d domain.Claims) *JwtTokenUpdate {
	jtu.mutation.SetClaims(d)
	return jtu
}

// SetIssuerID sets the "issuer_id" field.
func (jtu *JwtTokenUpdate) SetIssuerID(s string) *JwtTokenUpdate {
	jtu.mutation.SetIssuerID(s)
	return jtu
}

// SetIssuer sets the "issuer" edge to the User entity.
func (jtu *JwtTokenUpdate) SetIssuer(u *User) *JwtTokenUpdate {
	return jtu.SetIssuerID(u.ID)
}

// Mutation returns the JwtTokenMutation object of the builder.
func (jtu *JwtTokenUpdate) Mutation() *JwtTokenMutation {
	return jtu.mutation
}

// ClearIssuer clears the "issuer" edge to the User entity.
func (jtu *JwtTokenUpdate) ClearIssuer() *JwtTokenUpdate {
	jtu.mutation.ClearIssuer()
	return jtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jtu *JwtTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, JwtTokenMutation](ctx, jtu.sqlSave, jtu.mutation, jtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtu *JwtTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := jtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jtu *JwtTokenUpdate) Exec(ctx context.Context) error {
	_, err := jtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtu *JwtTokenUpdate) ExecX(ctx context.Context) {
	if err := jtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jtu *JwtTokenUpdate) check() error {
	if v, ok := jtu.mutation.Token(); ok {
		if err := jwttoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "JwtToken.token": %w`, err)}
		}
	}
	if _, ok := jtu.mutation.IssuerID(); jtu.mutation.IssuerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "JwtToken.issuer"`)
	}
	return nil
}

func (jtu *JwtTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jtu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jwttoken.Table,
			Columns: jwttoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jwttoken.FieldID,
			},
		},
	}
	if ps := jtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtu.mutation.Token(); ok {
		_spec.SetField(jwttoken.FieldToken, field.TypeString, value)
	}
	if value, ok := jtu.mutation.Revoked(); ok {
		_spec.SetField(jwttoken.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := jtu.mutation.Claims(); ok {
		_spec.SetField(jwttoken.FieldClaims, field.TypeJSON, value)
	}
	if jtu.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.IssuerTable,
			Columns: []string{jwttoken.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtu.mutation.IssuerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.IssuerTable,
			Columns: []string{jwttoken.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jtu.mutation.done = true
	return n, nil
}

// JwtTokenUpdateOne is the builder for updating a single JwtToken entity.
type JwtTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JwtTokenMutation
}

// SetToken sets the "token" field.
func (jtuo *JwtTokenUpdateOne) SetToken(s string) *JwtTokenUpdateOne {
	jtuo.mutation.SetToken(s)
	return jtuo
}

// SetRevoked sets the "revoked" field.
func (jtuo *JwtTokenUpdateOne) SetRevoked(b bool) *JwtTokenUpdateOne {
	jtuo.mutation.SetRevoked(b)
	return jtuo
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableRevoked(b *bool) *JwtTokenUpdateOne {
	if b != nil {
		jtuo.SetRevoked(*b)
	}
	return jtuo
}

// SetClaims sets the "claims" field.
func (jtuo *JwtTokenUpdateOne) SetClaims(d domain.Claims) *JwtTokenUpdateOne {
	jtuo.mutation.SetClaims(d)
	return jtuo
}

// SetIssuerID sets the "issuer_id" field.
func (jtuo *JwtTokenUpdateOne) SetIssuerID(s string) *JwtTokenUpdateOne {
	jtuo.mutation.SetIssuerID(s)
	return jtuo
}

// SetIssuer sets the "issuer" edge to the User entity.
func (jtuo *JwtTokenUpdateOne) SetIssuer(u *User) *JwtTokenUpdateOne {
	return jtuo.SetIssuerID(u.ID)
}

// Mutation returns the JwtTokenMutation object of the builder.
func (jtuo *JwtTokenUpdateOne) Mutation() *JwtTokenMutation {
	return jtuo.mutation
}

// ClearIssuer clears the "issuer" edge to the User entity.
func (jtuo *JwtTokenUpdateOne) ClearIssuer() *JwtTokenUpdateOne {
	jtuo.mutation.ClearIssuer()
	return jtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jtuo *JwtTokenUpdateOne) Select(field string, fields ...string) *JwtTokenUpdateOne {
	jtuo.fields = append([]string{field}, fields...)
	return jtuo
}

// Save executes the query and returns the updated JwtToken entity.
func (jtuo *JwtTokenUpdateOne) Save(ctx context.Context) (*JwtToken, error) {
	return withHooks[*JwtToken, JwtTokenMutation](ctx, jtuo.sqlSave, jtuo.mutation, jtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtuo *JwtTokenUpdateOne) SaveX(ctx context.Context) *JwtToken {
	node, err := jtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jtuo *JwtTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := jtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtuo *JwtTokenUpdateOne) ExecX(ctx context.Context) {
	if err := jtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jtuo *JwtTokenUpdateOne) check() error {
	if v, ok := jtuo.mutation.Token(); ok {
		if err := jwttoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "JwtToken.token": %w`, err)}
		}
	}
	if _, ok := jtuo.mutation.IssuerID(); jtuo.mutation.IssuerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "JwtToken.issuer"`)
	}
	return nil
}

func (jtuo *JwtTokenUpdateOne) sqlSave(ctx context.Context) (_node *JwtToken, err error) {
	if err := jtuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jwttoken.Table,
			Columns: jwttoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jwttoken.FieldID,
			},
		},
	}
	id, ok := jtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JwtToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jwttoken.FieldID)
		for _, f := range fields {
			if !jwttoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jwttoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtuo.mutation.Token(); ok {
		_spec.SetField(jwttoken.FieldToken, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.Revoked(); ok {
		_spec.SetField(jwttoken.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := jtuo.mutation.Claims(); ok {
		_spec.SetField(jwttoken.FieldClaims, field.TypeJSON, value)
	}
	if jtuo.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.IssuerTable,
			Columns: []string{jwttoken.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtuo.mutation.IssuerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.IssuerTable,
			Columns: []string{jwttoken.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JwtToken{config: jtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jtuo.mutation.done = true
	return _node, nil
}
